mtcars
str(mtcars)
mtcars$wt
library(car)
qqp(mtcars$wt)
qqPlot(mtcars$wt)
library(stats4332)
normality_check(mtcars$wt)
boxplot(mtcars$mpg)
boxplot(mtcars$mpg, col = 'rainbow')
boxplot(mtcars$mpg, col = rainbow)
library(stats4332)
normality_check(mtcars$mpg)
library(stats4332)
library(stats4332)
normality_check(mtcars$mpg)
shapiro.test(mtcars$wt)
library(stats4332)
normality_check(mtcars$mpg)
name(mtcars$mpg)
attributes(mtcars$mpg)
deparse(substitute(mtcars$mpg))
s <- deparse(substitute(mtcars$mpg))
s
library(stats4332)
normality_check(mptcars$mpg)
normality_check(mtcars$mpg)
library(stats4332)
normality_check(mtcars$mpg)
library(stats4332)
normality_check(mtcars$mpg)
library(stats4332)
normality_check(mtcars$mpg)
library(stats4332)
normality_check(mtcars$mpg)
library(stats4332)
?t.test
str(mtcars)
qqPlot(mtcars$mpg)
hist(mtcars$mpg)
shapiro.test(mtcars$mpg)
qqPlot(mtcars$wt)
shapiro.test(mtcars$mpg)
shapiro.test(mtcars$wt)
install.packages("MASS")
library(MASS)
normality_check(Cars93$Price)
normality_check(Cars93$Weight)
normality_check(Cars93$MPG.city)
normality_check(Cars93$Weight)
normality_check(Cars93$Weight)
normality_check(Cars93$MPG.city)
normality_check(Cars93$MPG.highway)
normality_check(cats$Bwt)
normality_check(cats$Hwt)
normality_check(iris$Petal.Length)
install.packages("car")
X
wine
??aa
??wine
qqnorm(mammals$body)
library(MASS)
qqnorm(mammals$body)
mammas$body
mammals$body
library(stats4332)
normality_check(survey$Height)
normality_check(survey$Pulse)
normality_check(survey$Age)
hist(survey$Height)
length(survey$Height)
normality_check(geyser$duration)
library(BSDA)
normality_check(Biology$score)
?install.packages
install.packages("BSDA")
install.packages("BSDA")
library(BSDA)
qqnorm(Biology$score)
qqline(Biology$score)
shapiro.test(Biology$score)
normality_test(cats$Bwt)
shapiro.test(cats$Bwt)
library(car)
library(stats4332)
normality_check(cats$Bwt)
library(MASS)
normality_check(cats$Bwt)
normality_check(Cars93$Price)
normality_check(cats$Bwt)
normality_check(Biology$score)
(18+26)/2
(26-18)/2
(40.3+43.9)/2
(43.9-40.3)/2
0.19/2
1-0.095
1-0.035
(110.4+111.6)/2
14/5
2.8*2.05
101-5.74
101+5.74
14/sqrt(10)
2.05*4.427
101-9.08
101+9.08
1.69*2.8
2.8*1.69
1.64*2.2
1.65*2.2
qnorm(0.91+0.09/2)
0.91+0.09/2
1.69*2
1.7*2
1.7*2.8
101-4.76
101+4.76
s <- 0.8
n <- 29
m <- 68
s/sqrt(n)
qnorm(0.92+0.03)
qnorm(0.96)
1.75*0.148556
m-0.26
m+0.26
qnorm(0.985)
2.17*0.148556
m-0.32
m+0.32
1.75^2*s^2/0.46^2
1.75^2*s^2/0.14^2
1.96^2*10^2/3.3^2
1.96^2*10^2/1^2
library(stats4332)
install.packages("usethis")
?usethis
library(usethis)
use_package("car")
library(stats4332)
12/80
x <- 12
n <- 80
phat <- x/n
n*phat*(1-phat)
sqrt(phat*(1-phat)/n)
qnorm(0.995)
2.58*0.039922
phat - 0.103
phat + 0.103
(0.228-0.072)/2
n <- 351
x <- 198
phat <- x/n
phat
n*0.564*(1-0.564)
sqrt(phat*(1-phat)/n)
1.96*0.02647
phat-0.052
phat+0.052
sqrt(0.5*0.5)*1.96/0.03
32.667^2
n <- 4748
phat <- 0.12
sqrt(phat*(1-phat)/n)
qnorm(0.995)
2.5*0.0047
x <- 400
n <- 2000
qnorm(0.95)
phat <- x/n
1.64*sqrt(phat*(1-phat)/n)
phat-0.01
0.5*1.64
qnorm(0.95)
1.64*sqrt(0.25)/0.045
18.222^2
0.39/sqrt(40)
1.798*0.0617
0.77-0.111
0.77+0.111
x <- c(15, 12.6, 17.7, 14.5, 12.4, 10.4, 9.4, 7.9)
sort(x)
12.4-7.9
6/15
6/44.15
library(devtools)
pnorm(-3.13)
0.0009*2
pnorm(-3.08)
1 - pnorm(0.68)
1-pnorm(3.13)
0.0009*2
pnorm(-0.49)
1-pnorm(1.78)
1-pnorm(0.65)
0.2578*2
pnorm(-1.9)
1-pnorm(2.62)
4.7-4.1
0.6/(1.4/sqrt(21))
pwr.z.test(m0 = 3, m1 = 2.5, sd = 1, n = 15,
sig.level = 0.01, alternative = "two.sided")
x <- c(167.7, 180.7, 185.5, 190.2, 195.1, 200.1, 201.7, 207.1, 206.9, 208.3, 225.6, 228.2, 228.8, 233, 240, 258.9)
normality_check(x)
sd(x)/sqrt(16)
6.0546*2.034
mean(x)
209.86-12.32
209.86+12.32
x
x<- c(167.5, 180.9, 185.5, 190.3, 195, 200.2, 201.9, 207, 206.7, 208.1, 226.4, 228, 228.6, 232.2, 239.7, 258.7)
sd(x)/4
2.034*6.0334
mean(x)
209.79-12.27
209.79+12.27
mean(x)
x <- c(168.4, 180.7, 184.9, 189.9, 194.6, 199.8, 201.7, 206.9, 206.6, 207.8, 225.9, 227.9, 228.8, 232, 239.2, 258.2)
length(x)
mean(x)
sd(x)
options(digits = 10)
sd(x)
x <- 3.25
is.numeric(x)
library(stats4332)
ssize.z.test(m0 = 3.25, m1 = 3, sd = 1, power = 0.9, sig.level = 0.04, alternative = "less")
ssize.z.test(m0 = "s",m1 = 3, sd = 1, power = 0.9, sig.level = 0.04, alternative = "less")
pwr.z.test(m0 = "3",m1 = 2.5, sd = 1, n = 15, sig.level = 0.01, alternative = "two.sided")
pwr.z.test(m0 = 3, m1 = 2.5, sd = -1, n = 15, sig.level = 0.01, alternative = "less")
n <- 15
is.integer(n)
class(n)
?is.integer
is.wholenumber(n)
round(n) == n
round(n) != n
library(stats4332)
pwr.z.test <- function(m0, m1, sd, n,
sig.level = 0.05,
alternative = c("two.sided","less","greater")) {
if (is.numeric(m0) == FALSE) stop("The mean m0 from the null should be a number.")
if (is.numeric(m1) == FALSE) stop("The mean m1, the alternative value of the mean, should be a number.")
if (is.numeric(sd) == FALSE) {
stop("Standard deviation should be positive real number")
} else if (sd <= 0) {
stop("Standard deviation should be a positive number.")
}
if (round(n) != n) {
stop("Sample size should be a positive integer")
}
if (is.numeric(sig.level) == FALSE) {
stop("Significance level should be a decimal between 0 and 1")
} else if (sig.level <= 0 | sig.level >= 1) {
stop("Significance level should be a decimal between 0 and 1")
}
if (alternative != "two.sided" | alternative != "less" |
alternative != "greater") {
stop("Alternative can only be \"two.sided\", \"less\"
or \"greater\".")
}
a <- ifelse(alternative == "two.sided", sig.level/2, sig.level);
#finding z-alpha or z-alpha/2
z_crit <- qnorm(1 - a);
z1 <- z_crit + (m0 - m1)/(sd/sqrt(n))
z2 <- -z_crit + (m0 - m1)/(sd/sqrt(n))
p1 <- pnorm(z1)
p2 <- pnorm(z2)
beta <- ifelse(alternative == "two.sided", p1-p2,
ifelse(alternative == "less", 1-p2, p1))
1 - beta
}
pwr.z.test(m0 = 1, m1 = 1.2, sd = 0.5, n = 25, alternative = "two.tailed")
library(stats4332)
library(stats4332)
pwr.z.test <- function(m0, m1, sd, n,
sig.level = 0.05,
alternative = "two.sided") {
if (is.numeric(m0) == FALSE) stop("The mean m0 from the null should be a number.")
if (is.numeric(m1) == FALSE) stop("The mean m1, the alternative value of the mean, should be a number.")
if (is.numeric(sd) == FALSE) {
stop("Standard deviation should be positive real number")
} else if (sd <= 0) {
stop("Standard deviation should be a positive number.")
}
if (round(n) != n) {
stop("Sample size should be a positive integer.")
}
if (is.numeric(sig.level) == FALSE) {
stop("Significance level should be a decimal between 0 and 1")
} else if (sig.level <= 0 | sig.level >= 1) {
stop("Significance level should be a decimal between 0 and 1")
}
if (alternative != "two.sided" | alternative != "less" |
alternative != "greater") {
stop("Alternative can only be \"two.sided\", \"less\"
or \"greater\".")
}
a <- ifelse(alternative == "two.sided", sig.level/2, sig.level);
#finding z-alpha or z-alpha/2
z_crit <- qnorm(1 - a);
z1 <- z_crit + (m0 - m1)/(sd/sqrt(n))
z2 <- -z_crit + (m0 - m1)/(sd/sqrt(n))
p1 <- pnorm(z1)
p2 <- pnorm(z2)
beta <- ifelse(alternative == "two.sided", p1-p2,
ifelse(alternative == "less", 1-p2, p1))
1 - beta
}
pwr.z.test(m0 = 3, m1 = 2.5, sd = 1, n = 15, sig.level = 0.01, alternative = "two.sided")
pwr.z.test <- function(m0, m1, sd, n,
sig.level = 0.05,
alternative = "two.sided") {
if (is.numeric(m0) == FALSE) stop("The mean m0 from the null should be a number.")
if (is.numeric(m1) == FALSE) stop("The mean m1, the alternative value of the mean, should be a number.")
if (is.numeric(sd) == FALSE) {
stop("Standard deviation should be positive real number")
} else if (sd <= 0) {
stop("Standard deviation should be a positive number.")
}
if (round(n) != n) {
stop("Sample size should be a positive integer.")
}
if (is.numeric(sig.level) == FALSE) {
stop("Significance level should be a decimal between 0 and 1")
} else if (sig.level <= 0 | sig.level >= 1) {
stop("Significance level should be a decimal between 0 and 1")
}
if (alternative != "two.sided" & alternative != "less" &
alternative != "greater") {
stop("Alternative can only be \"two.sided\", \"less\"
or \"greater\".")
}
a <- ifelse(alternative == "two.sided", sig.level/2, sig.level);
#finding z-alpha or z-alpha/2
z_crit <- qnorm(1 - a);
z1 <- z_crit + (m0 - m1)/(sd/sqrt(n))
z2 <- -z_crit + (m0 - m1)/(sd/sqrt(n))
p1 <- pnorm(z1)
p2 <- pnorm(z2)
beta <- ifelse(alternative == "two.sided", p1-p2,
ifelse(alternative == "less", 1-p2, p1))
1 - beta
}
pwr.z.test(m0 = 3, m1 = 2.5, sd = 1, n = 15, sig.level = 0.01, alternative = "two.sided")
library(stats4332)
library(stats4332)
@export
library(stats4332)
library(stats4332)
remove.packages("stats4332", lib="~/R/win-library/4.1")
